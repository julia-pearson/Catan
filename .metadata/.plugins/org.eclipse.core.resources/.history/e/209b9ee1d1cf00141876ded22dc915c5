import java.util.Random;


public class NoPeople {
	private RunGame rg;
	private GameLogic gl;
	int[] possibleActions;
	int actionCount;
	int[] settlementVertices;
	int setVertexCount = 0;
	
	boolean debug = true;
	
	public NoPeople(RunGame r){
		rg = r;
		possibleActions = new int[10];
	}
	
	public void doFirstRound(){
		boolean settlementPlaced = false;
		while (!settlementPlaced){
			settlementPlaced = 	rg.placeSettlementFirstRound(firstRoundChoice());
		}
	}
	
	public int firstRoundChoice(){
		Random generator =  new Random();
		int vertexToBuild = generator.nextInt(34);
		return vertexToBuild;
	}
	
	/*
	public void startGame(){
		System.out.println("Let's start playing!");
		for (int i=0; i<turnOrder.length; i++){
			currentPlayerID = turnOrder[i];
			Player currentPlayer = players[currentPlayerID];
			System.out.println("Player who will go is: " +currentPlayerID);
			firstRound(currentPlayer);
		} 
		for (int i=turnOrder.length-1; i>=0; i--){
			currentPlayerID = turnOrder[i];
			Player currentPlayer = players[currentPlayerID];
			System.out.println("Player who will go is: " +currentPlayerID);
			firstRound(currentPlayer);
		}
	}*/

	public void turn(int p){
		checkPossible(p);
		
		// check available actions
		//pick action randomly
		
	//	int actionType = pickAction();

		//complete action with gl
		//use runGame to update game state
	}
	
	//populate the array possibleActions with list of the moves you can make
	private void checkPossible(int p){
		actionCount = 0;
		if (settlementPossible(p)){
			possibleActions[actionCount] = 1;
		}
	}
	
	//check if there is any vertex that you can build a settlement on
	private boolean settlementPossible(int p){
		settlementVertices = new int[54];
		setVertexCount = 0;
		boolean toReturn = false;
		for (int i = 0; i<settlementVertices.length; i++){
			if (gl.buildSetCheck(p, i)){
				settlementVertices[setVertexCount] = i;
				toReturn = true;
				if (debug){
					System.out.println("Possible to build a settlment on vertex: "+i+ " for player "+p);
				}
			}
		}
		return toReturn;
	}
	
}
